{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GitExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GitExpertApp","categories","i","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6MAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EACRC,mBAAS,IADD,mBACrCC,EADqC,KACzBC,EADyB,KAY5C,OACI,0BAAMC,SARS,SAACC,GAChBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAO,IACxBR,GAAc,SAAAS,GAAI,OAAGP,GAAH,mBAAiBO,OACnCN,EAAc,OAKd,2BACIO,KAAK,OACLC,MAAOT,EACPU,SAfY,SAACP,GACrBF,EAAcE,EAAEQ,OAAOF,Y,uBCNjBG,EAAO,uCAAE,WAAMC,GAAN,uBAAAC,EAAA,6DACbC,EADa,iDACiCC,UAAUH,GAD3C,+DAEDI,MAAMF,GAFL,cAEbG,EAFa,gBAGCA,EAAKC,OAHN,uBAGZC,EAHY,EAGZA,KACDC,EAAKD,EAAKE,KAAI,SAACC,GAAO,IAAD,EACvB,MAAM,CACFC,GAAGD,EAAIC,GACPC,MAAMF,EAAIE,MACVV,IAAG,UAACQ,EAAIG,cAAL,aAAC,EAAYC,iBAAiBZ,QARtB,kBAYZM,GAZY,4CAAF,sDCERO,EAAc,SAAC,GAAoB,EAAnBJ,GAAoB,IAAhBC,EAAe,EAAfA,MAAMV,EAAS,EAATA,IACnC,OACI,yBAAKc,UAAU,0CACZ,yBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,2BAAIA,KCDFO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECFX,SAACA,GAAc,IAAD,EACZd,mBAAS,CAC/BqB,KAAK,GACLa,SAAQ,IAH0B,mBAC/BC,EAD+B,KACxBC,EADwB,KAiBtC,OAXAC,qBAAU,WACNxB,EAAQC,GACPwB,MAAK,SAAAC,GACEH,EAAS,CACLf,KAAKkB,EACLL,SAAQ,SAItB,CAACpB,IAEIqB,EDbqBK,CAAa1B,GAAlCoB,EAF4B,EAE5BA,QAAaP,EAFe,EAEpBN,KACf,OACG,oCACK,4BAAKP,GACJoB,GAAS,uBAAGJ,UAAU,oCAAb,eACV,yBAAKA,UAAU,aAGHH,EAAOJ,KAAI,SAACC,GAAD,OACP,kBAAC,EAAD,eACAiB,IAAKjB,EAAIC,IACLD,UEiBjBkB,EA/BM,WAAM,MAGa1C,mBAAS,CAAC,cAHvB,mBAGhB2C,EAHgB,KAGJ5C,EAHI,KASvB,OACI,oCACI,4CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BAEA,4BAEQ4C,EAAWpB,KAAI,SAACT,EAAS8B,GAAV,OACX,kBAAE,EAAF,CACIH,IAAK3B,EACLA,SAAUA,UCnBtC+B,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.7034213b.chunk.js","sourcesContent":["import React,{useState} from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({setCategories}) => {\n    const [inputValue, setInputValue] = useState('');\n    const handleInputChange=(e)=>{\n        setInputValue(e.target.value)\n    }\n    const handleSubmit=(e)=>{\n        e.preventDefault();\n        if(inputValue.trim().length>2){\n            setCategories(cats=>[inputValue,...cats]);\n            setInputValue('');\n        }\n    }\n    return (\n        <form onSubmit={handleSubmit}> \n            <input\n                type=\"text\"\n                value={inputValue}\n                onChange={handleInputChange}\n            />\n        </form>\n    )\n}\n\nAddCategory.propTypes={\n    setCategories:PropTypes.func.isRequired\n}"," export const getGifs= async(category)=>{\n    const url=`https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=ym1JaFy1dd7iM1kKVSxxyV8uq3QC6cEF`;\n    const resp =await fetch(url);\n    const {data}= await resp.json();\n    const gifs=data.map((img)=>{\n        return{\n            id:img.id,\n            title:img.title,\n            url:img.images?.downsized_medium.url\n\n        }\n    })\n    return gifs;\n}","import React from 'react'\n\nexport const GifGridItem = ({id, title,url}) => {\n    return (\n        <div className=\"card animate__animated animate__zoomIn\">\n           <img src={url} alt={title}/>\n           <p>{title}</p>\n        </div>\n    )\n}\n","import React  from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\nimport { GifGridItem } from './GifGridItem';\n\n\nexport const GifGrid = ({category}) => {\n    // const [images, setImages] = useState([])\n    const {loading,data:images}=useFetchGifs(category); \n    return (\n       <>\n            <h3>{category}</h3>\n            {loading&&<p className=\"animate__animated animate__flash\">Cargando...</p>}\n            <div className=\"card-grid\">\n            \n                    {\n                        images.map((img)=>(\n                            <GifGridItem  \n                            key={img.id} \n                            {...img}/>\n                        ))\n                    }\n            \n            </div>\n       </>\n    )\n}\n","import {useState,useEffect} from 'react';\nimport {getGifs} from '../helpers/getGifs';\n\nexport const useFetchGifs = (category) => {\n    const [state, setState] = useState({\n        data:[],\n        loading:true\n    });\n\n    useEffect(()=>{\n        getGifs(category)\n        .then(imgs=>{\n                setState({\n                    data:imgs,\n                    loading:false\n                })\n        })\n        \n    },[category])// [] se usa para que solo se renderise una sola vez en el component\n\n    return state;\n}\n","import React,{useState} from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nconst GitExpertApp = () => {\n    //const categories=['One Punch', 'Samurai x', 'Dragon Ball'];\n\n    const [categories, setCategories] = useState(['One Punch']);\n\n    // const handleAdd=()=>{\n    //     setCategoies([...categories,'HOla'])\n    // }\n\n    return (\n        <>\n            <h2>GitExpertApp</h2>\n            <AddCategory setCategories={setCategories}/>\n            <hr/>\n            {/* <button onClick={handleAdd}>Agregar</button> */}\n            <ol>\n                {\n                    categories.map((category,i)=>(\n                        < GifGrid \n                            key={category} \n                            category={category}\n                        />\n                    ))\n                }\n            </ol>\n        </>\n    )\n}\n\n\n\nexport default GitExpertApp\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GitExpertApp from './GitExpertApp';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GitExpertApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}